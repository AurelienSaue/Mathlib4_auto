/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.PrePort
import Mathlib.Lean3Lib.init.default
import Mathlib.topology.category.Top.open_nhds
import Mathlib.topology.sheaves.presheaf
import Mathlib.category_theory.limits.limits
import Mathlib.category_theory.limits.types
import Mathlib.PostPort

universes u v u_1 

namespace Mathlib

namespace Top.presheaf


/-- Stalks are functorial with respect to morphisms of presheaves over a fixed `X`. -/
def stalk_functor (C : Type u) [category_theory.category C] [category_theory.limits.has_colimits C]
    {X : Top} (x : ‚Ü•X) : presheaf C X ‚•§ C :=
  category_theory.functor.obj
      (category_theory.whiskering_left (topological_space.open_nhds x·µí·µñ)
        (topological_space.opens ‚Ü•X·µí·µñ) C)
      (category_theory.functor.op (topological_space.open_nhds.inclusion x)) ‚ãô
    category_theory.limits.colim

/--
The stalk of a presheaf `F` at a point `x` is calculated as the colimit of the functor
nbhds x ‚•§ opens F.X ‚•§ C
-/
def stalk {C : Type u} [category_theory.category C] [category_theory.limits.has_colimits C]
    {X : Top} (‚Ñ± : presheaf C X) (x : ‚Ü•X) : C :=
  category_theory.functor.obj (stalk_functor C x) ‚Ñ±

@[simp] theorem stalk_functor_obj {C : Type u} [category_theory.category C]
    [category_theory.limits.has_colimits C] {X : Top} (‚Ñ± : presheaf C X) (x : ‚Ü•X) :
    category_theory.functor.obj (stalk_functor C x) ‚Ñ± = stalk ‚Ñ± x :=
  rfl

/--
The germ of a section of a presheaf over an open at a point of that open.
-/
def germ {C : Type u} [category_theory.category C] [category_theory.limits.has_colimits C] {X : Top}
    (F : presheaf C X) {U : topological_space.opens ‚Ü•X} (x : ‚Ü•U) :
    category_theory.functor.obj F (opposite.op U) ‚ü∂ stalk F ‚Üëx :=
  category_theory.limits.colimit.Œπ
    (category_theory.functor.op (topological_space.open_nhds.inclusion (subtype.val x)) ‚ãô F)
    (opposite.op { val := U, property := sorry })

/-- For a `Type` valued presheaf, every point in a stalk is a germ. -/
theorem germ_exist {X : Top} (F : presheaf (Type v) X) (x : ‚Ü•X) (t : stalk F x) :
    ‚àÉ (U : topological_space.opens ‚Ü•X),
        ‚àÉ (m : x ‚àà U),
          ‚àÉ (s : category_theory.functor.obj F (opposite.op U)),
            germ F { val := x, property := m } s = t :=
  sorry

theorem germ_eq {X : Top} (F : presheaf (Type v) X) {U : topological_space.opens ‚Ü•X}
    {V : topological_space.opens ‚Ü•X} (x : ‚Ü•X) (mU : x ‚àà U) (mV : x ‚àà V)
    (s : category_theory.functor.obj F (opposite.op U))
    (t : category_theory.functor.obj F (opposite.op V))
    (h : germ F { val := x, property := mU } s = germ F { val := x, property := mV } t) :
    ‚àÉ (W : topological_space.opens ‚Ü•X),
        ‚àÉ (m : x ‚àà W),
          ‚àÉ (iU : W ‚ü∂ U),
            ‚àÉ (iV : W ‚ü∂ V),
              category_theory.functor.map F (category_theory.has_hom.hom.op iU) s =
                category_theory.functor.map F (category_theory.has_hom.hom.op iV) t :=
  sorry

@[simp] theorem germ_res {C : Type u} [category_theory.category C]
    [category_theory.limits.has_colimits C] {X : Top} (F : presheaf C X)
    {U : topological_space.opens ‚Ü•X} {V : topological_space.opens ‚Ü•X} (i : U ‚ü∂ V) (x : ‚Ü•U) :
    category_theory.functor.map F (category_theory.has_hom.hom.op i) ‚â´ germ F x =
        germ F (coe_fn i x) :=
  sorry

@[simp] theorem germ_res_apply {X : Top} (F : presheaf (Type v) X) {U : topological_space.opens ‚Ü•X}
    {V : topological_space.opens ‚Ü•X} (i : U ‚ü∂ V) (x : ‚Ü•U)
    (f : category_theory.functor.obj F (opposite.op V)) :
    germ F x (category_theory.functor.map F (category_theory.has_hom.hom.op i) f) =
        germ F (coe_fn i x) f :=
  sorry

/-- A variant when the open sets are written in `(opens X)·µí·µñ`. -/
@[simp] theorem germ_res_apply' {X : Top} (F : presheaf (Type v) X)
    {U : topological_space.opens ‚Ü•X·µí·µñ} {V : topological_space.opens ‚Ü•X·µí·µñ} (i : V ‚ü∂ U)
    (x : ‚Ü•(opposite.unop U)) (f : category_theory.functor.obj F V) :
    germ F x (category_theory.functor.map F i f) =
        germ F (coe_fn (category_theory.has_hom.hom.unop i) x) f :=
  sorry

theorem germ_ext {X : Top} {D : Type u} [category_theory.category D]
    [category_theory.concrete_category D] [category_theory.limits.has_colimits D] (F : presheaf D X)
    {U : topological_space.opens ‚Ü•X} {V : topological_space.opens ‚Ü•X} {x : ‚Ü•X} {hxU : x ‚àà U}
    {hxV : x ‚àà V} (W : topological_space.opens ‚Ü•X) (hxW : x ‚àà W) (iWU : W ‚ü∂ U) (iWV : W ‚ü∂ V)
    {sU : ‚Ü•(category_theory.functor.obj F (opposite.op U))}
    {sV : ‚Ü•(category_theory.functor.obj F (opposite.op V))}
    (ih :
      coe_fn (category_theory.functor.map F (category_theory.has_hom.hom.op iWU)) sU =
        coe_fn (category_theory.functor.map F (category_theory.has_hom.hom.op iWV)) sV) :
    coe_fn (germ F { val := x, property := hxU }) sU =
        coe_fn (germ F { val := x, property := hxV }) sV :=
  sorry

theorem stalk_hom_ext {C : Type u} [category_theory.category C]
    [category_theory.limits.has_colimits C] {X : Top} (F : presheaf C X) {x : ‚Ü•X} {Y : C}
    {f‚ÇÅ : stalk F x ‚ü∂ Y} {f‚ÇÇ : stalk F x ‚ü∂ Y}
    (ih :
      ‚àÄ (U : topological_space.opens ‚Ü•X) (hxU : x ‚àà U),
        germ F { val := x, property := hxU } ‚â´ f‚ÇÅ = germ F { val := x, property := hxU } ‚â´ f‚ÇÇ) :
    f‚ÇÅ = f‚ÇÇ :=
  sorry

def stalk_pushforward (C : Type u) [category_theory.category C]
    [category_theory.limits.has_colimits C] {X : Top} {Y : Top} (f : X ‚ü∂ Y) (‚Ñ± : presheaf C X)
    (x : ‚Ü•X) : stalk (f _* ‚Ñ±) (coe_fn f x) ‚ü∂ stalk ‚Ñ± x :=
  category_theory.functor.map category_theory.limits.colim
      (category_theory.whisker_right
        (category_theory.nat_trans.op
          (category_theory.iso.inv (topological_space.open_nhds.inclusion_map_iso f x)))
        ‚Ñ±) ‚â´
    category_theory.limits.colimit.pre
      (category_theory.functor.obj
        (category_theory.functor.obj
          (category_theory.whiskering_left (topological_space.open_nhds x·µí·µñ)
            (topological_space.opens ‚Ü•X·µí·µñ) C)
          (category_theory.functor.op (topological_space.open_nhds.inclusion x)))
        ‚Ñ±)
      (category_theory.functor.op (topological_space.open_nhds.map f x))

-- Here are two other potential solutions, suggested by @fpvandoorn at

-- <https://github.com/leanprover-community/mathlib/pull/1018#discussion_r283978240>

-- However, I can't get the subsequent two proofs to work with either one.

-- def stalk_pushforward (f : X ‚ü∂ Y) (‚Ñ± : X.presheaf C) (x : X) : (f _* ‚Ñ±).stalk (f x) ‚ü∂ ‚Ñ±.stalk x :=

-- colim.map ((functor.associator _ _ _).inv ‚â´

--   whisker_right (nat_trans.op (open_nhds.inclusion_map_iso f x).inv) ‚Ñ±) ‚â´

-- colimit.pre ((open_nhds.inclusion x).op ‚ãô ‚Ñ±) (open_nhds.map f x).op

-- def stalk_pushforward (f : X ‚ü∂ Y) (‚Ñ± : X.presheaf C) (x : X) : (f _* ‚Ñ±).stalk (f x) ‚ü∂ ‚Ñ±.stalk x :=

-- (colim.map (whisker_right (nat_trans.op (open_nhds.inclusion_map_iso f x).inv) ‚Ñ±) :

--   colim.obj ((open_nhds.inclusion (f x) ‚ãô opens.map f).op ‚ãô ‚Ñ±) ‚ü∂ _) ‚â´

-- colimit.pre ((open_nhds.inclusion x).op ‚ãô ‚Ñ±) (open_nhds.map f x).op

namespace stalk_pushforward


@[simp] theorem id (C : Type u) [category_theory.category C] [category_theory.limits.has_colimits C]
    {X : Top} (‚Ñ± : presheaf C X) (x : ‚Ü•X) :
    stalk_pushforward C ùüô ‚Ñ± x =
        category_theory.functor.map (stalk_functor C x)
          (category_theory.iso.hom (pushforward.id ‚Ñ±)) :=
  sorry

-- This proof is sadly not at all robust:

-- having to use `erw` at all is a bad sign.

@[simp] theorem comp (C : Type u) [category_theory.category C]
    [category_theory.limits.has_colimits C] {X : Top} {Y : Top} {Z : Top} (‚Ñ± : presheaf C X)
    (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : ‚Ü•X) :
    stalk_pushforward C (f ‚â´ g) ‚Ñ± x =
        stalk_pushforward C g (f _* ‚Ñ±) (coe_fn f x) ‚â´ stalk_pushforward C f ‚Ñ± x :=
  sorry

end Mathlib