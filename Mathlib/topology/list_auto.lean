/-
Copyright (c) 2019 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl
-/
import Mathlib.PrePort
import Mathlib.Lean3Lib.init.default
import Mathlib.topology.constructions
import Mathlib.topology.algebra.group
import Mathlib.PostPort

universes u_1 u_2 

namespace Mathlib

/-!
# Topology on lists and vectors

-/

protected instance list.topological_space {Œ± : Type u_1} [topological_space Œ±] :
    topological_space (List Œ±) :=
  topological_space.mk_of_nhds (traverse nhds)

theorem nhds_list {Œ± : Type u_1} [topological_space Œ±] (as : List Œ±) : nhds as = traverse nhds as :=
  sorry

@[simp] theorem nhds_nil {Œ± : Type u_1} [topological_space Œ±] : nhds [] = pure [] :=
  eq.mpr (id (Eq._oldrec (Eq.refl (nhds [] = pure [])) (nhds_list [])))
    (eq.mpr (id (Eq._oldrec (Eq.refl (traverse nhds [] = pure [])) (list.traverse_nil nhds)))
      (Eq.refl (pure [])))

theorem nhds_cons {Œ± : Type u_1} [topological_space Œ±] (a : Œ±) (l : List Œ±) :
    nhds (a :: l) = List.cons <$> nhds a <*> nhds l :=
  sorry

theorem list.tendsto_cons {Œ± : Type u_1} [topological_space Œ±] {a : Œ±} {l : List Œ±} :
    filter.tendsto (fun (p : Œ± √ó List Œ±) => prod.fst p :: prod.snd p)
        (filter.prod (nhds a) (nhds l)) (nhds (a :: l)) :=
  sorry

theorem filter.tendsto.cons {Œ≤ : Type u_2} [topological_space Œ≤] {Œ± : Type u_1} {f : Œ± ‚Üí Œ≤}
    {g : Œ± ‚Üí List Œ≤} {a : filter Œ±} {b : Œ≤} {l : List Œ≤} (hf : filter.tendsto f a (nhds b))
    (hg : filter.tendsto g a (nhds l)) :
    filter.tendsto (fun (a : Œ±) => f a :: g a) a (nhds (b :: l)) :=
  filter.tendsto.comp list.tendsto_cons (filter.tendsto.prod_mk hf hg)

namespace list


theorem tendsto_cons_iff {Œ± : Type u_1} [topological_space Œ±] {Œ≤ : Type u_2} {f : List Œ± ‚Üí Œ≤}
    {b : filter Œ≤} {a : Œ±} {l : List Œ±} :
    filter.tendsto f (nhds (a :: l)) b ‚Üî
        filter.tendsto (fun (p : Œ± √ó List Œ±) => f (prod.fst p :: prod.snd p))
          (filter.prod (nhds a) (nhds l)) b :=
  sorry

theorem continuous_cons {Œ± : Type u_1} [topological_space Œ±] :
    continuous fun (x : Œ± √ó List Œ±) => prod.fst x :: prod.snd x :=
  sorry

theorem tendsto_nhds {Œ± : Type u_1} [topological_space Œ±] {Œ≤ : Type u_2} {f : List Œ± ‚Üí Œ≤}
    {r : List Œ± ‚Üí filter Œ≤} (h_nil : filter.tendsto f (pure []) (r []))
    (h_cons :
      ‚àÄ (l : List Œ±) (a : Œ±),
        filter.tendsto f (nhds l) (r l) ‚Üí
          filter.tendsto (fun (p : Œ± √ó List Œ±) => f (prod.fst p :: prod.snd p))
            (filter.prod (nhds a) (nhds l)) (r (a :: l)))
    (l : List Œ±) : filter.tendsto f (nhds l) (r l) :=
  sorry

theorem continuous_at_length {Œ± : Type u_1} [topological_space Œ±] (l : List Œ±) :
    continuous_at length l :=
  sorry

theorem tendsto_insert_nth' {Œ± : Type u_1} [topological_space Œ±] {a : Œ±} {n : ‚Ñï} {l : List Œ±} :
    filter.tendsto (fun (p : Œ± √ó List Œ±) => insert_nth n (prod.fst p) (prod.snd p))
        (filter.prod (nhds a) (nhds l)) (nhds (insert_nth n a l)) :=
  sorry

theorem tendsto_insert_nth {Œ± : Type u_1} [topological_space Œ±] {Œ≤ : Type u_2} {n : ‚Ñï} {a : Œ±}
    {l : List Œ±} {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí List Œ±} {b : filter Œ≤} (hf : filter.tendsto f b (nhds a))
    (hg : filter.tendsto g b (nhds l)) :
    filter.tendsto (fun (b : Œ≤) => insert_nth n (f b) (g b)) b (nhds (insert_nth n a l)) :=
  filter.tendsto.comp tendsto_insert_nth' (filter.tendsto.prod_mk hf hg)

theorem continuous_insert_nth {Œ± : Type u_1} [topological_space Œ±] {n : ‚Ñï} :
    continuous fun (p : Œ± √ó List Œ±) => insert_nth n (prod.fst p) (prod.snd p) :=
  sorry

theorem tendsto_remove_nth {Œ± : Type u_1} [topological_space Œ±] {n : ‚Ñï} {l : List Œ±} :
    filter.tendsto (fun (l : List Œ±) => remove_nth l n) (nhds l) (nhds (remove_nth l n)) :=
  sorry

theorem continuous_remove_nth {Œ± : Type u_1} [topological_space Œ±] {n : ‚Ñï} :
    continuous fun (l : List Œ±) => remove_nth l n :=
  iff.mpr continuous_iff_continuous_at fun (a : List Œ±) => tendsto_remove_nth

theorem tendsto_sum {Œ± : Type u_1} [topological_space Œ±] [add_monoid Œ±] [has_continuous_add Œ±]
    {l : List Œ±} : filter.tendsto sum (nhds l) (nhds (sum l)) :=
  sorry

theorem continuous_sum {Œ± : Type u_1} [topological_space Œ±] [add_monoid Œ±] [has_continuous_add Œ±] :
    continuous sum :=
  iff.mpr continuous_iff_continuous_at fun (l : List Œ±) => tendsto_sum

end list


namespace vector


protected instance topological_space {Œ± : Type u_1} [topological_space Œ±] (n : ‚Ñï) :
    topological_space (vector Œ± n) :=
  eq.mpr sorry subtype.topological_space

theorem tendsto_cons {Œ± : Type u_1} [topological_space Œ±] {n : ‚Ñï} {a : Œ±} {l : vector Œ± n} :
    filter.tendsto (fun (p : Œ± √ó vector Œ± n) => prod.fst p::·µ•prod.snd p)
        (filter.prod (nhds a) (nhds l)) (nhds (a::·µ•l)) :=
  sorry

theorem tendsto_insert_nth {Œ± : Type u_1} [topological_space Œ±] {n : ‚Ñï} {i : fin (n + 1)} {a : Œ±}
    {l : vector Œ± n} :
    filter.tendsto (fun (p : Œ± √ó vector Œ± n) => insert_nth (prod.fst p) i (prod.snd p))
        (filter.prod (nhds a) (nhds l)) (nhds (insert_nth a i l)) :=
  sorry

theorem continuous_insert_nth' {Œ± : Type u_1} [topological_space Œ±] {n : ‚Ñï} {i : fin (n + 1)} :
    continuous fun (p : Œ± √ó vector Œ± n) => insert_nth (prod.fst p) i (prod.snd p) :=
  sorry

theorem continuous_insert_nth {Œ± : Type u_1} {Œ≤ : Type u_2} [topological_space Œ±]
    [topological_space Œ≤] {n : ‚Ñï} {i : fin (n + 1)} {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí vector Œ± n}
    (hf : continuous f) (hg : continuous g) : continuous fun (b : Œ≤) => insert_nth (f b) i (g b) :=
  continuous.comp continuous_insert_nth' (continuous.prod_mk hf hg)

theorem continuous_at_remove_nth {Œ± : Type u_1} [topological_space Œ±] {n : ‚Ñï} {i : fin (n + 1)}
    {l : vector Œ± (n + 1)} : continuous_at (remove_nth i) l :=
  sorry

--  ‚àÄ{l:vector Œ± (n+1)}, tendsto (remove_nth i) (ùìù l) (ùìù (remove_nth i l))

--| ‚ü®l, hl‚ü© :=

theorem continuous_remove_nth {Œ± : Type u_1} [topological_space Œ±] {n : ‚Ñï} {i : fin (n + 1)} :
    continuous (remove_nth i) :=
  sorry

end Mathlib