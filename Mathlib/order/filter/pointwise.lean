/-
Copyright (c) 2019 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou
-/
import Mathlib.PrePort
import Mathlib.Lean3Lib.init.default
import Mathlib.algebra.pointwise
import Mathlib.order.filter.basic
import Mathlib.PostPort

universes u v 

namespace Mathlib

/-!
# Pointwise operations on filters.

The pointwise operations on filters have nice properties, such as
  ‚Ä¢ `map m (f‚ÇÅ * f‚ÇÇ) = map m f‚ÇÅ * map m f‚ÇÇ`
  ‚Ä¢ `ùìù x * ùìù y = ùìù (x * y)`

-/

namespace filter


protected instance has_one {Œ± : Type u} [HasOne Œ±] : HasOne (filter Œ±) :=
  { one := principal 1 }

@[simp] theorem mem_zero {Œ± : Type u} [HasZero Œ±] (s : set Œ±) : s ‚àà 0 ‚Üî 0 ‚àà s := sorry

protected instance has_mul {Œ± : Type u} [monoid Œ±] : Mul (filter Œ±) :=
  { mul :=
      fun (f g : filter Œ±) =>
        mk (set_of fun (s : set Œ±) => ‚àÉ (t‚ÇÅ : set Œ±), ‚àÉ (t‚ÇÇ : set Œ±), t‚ÇÅ ‚àà f ‚àß t‚ÇÇ ‚àà g ‚àß t‚ÇÅ * t‚ÇÇ ‚äÜ s) sorry sorry sorry }

theorem mem_add {Œ± : Type u} [add_monoid Œ±] {f : filter Œ±} {g : filter Œ±} {s : set Œ±} : s ‚àà f + g ‚Üî ‚àÉ (t‚ÇÅ : set Œ±), ‚àÉ (t‚ÇÇ : set Œ±), t‚ÇÅ ‚àà f ‚àß t‚ÇÇ ‚àà g ‚àß t‚ÇÅ + t‚ÇÇ ‚äÜ s :=
  iff.rfl

theorem mul_mem_mul {Œ± : Type u} [monoid Œ±] {f : filter Œ±} {g : filter Œ±} {s : set Œ±} {t : set Œ±} (hs : s ‚àà f) (ht : t ‚àà g) : s * t ‚àà f * g :=
  Exists.intro s (Exists.intro t { left := hs, right := { left := ht, right := set.subset.refl (s * t) } })

protected theorem mul_le_mul {Œ± : Type u} [monoid Œ±] {f‚ÇÅ : filter Œ±} {f‚ÇÇ : filter Œ±} {g‚ÇÅ : filter Œ±} {g‚ÇÇ : filter Œ±} (hf : f‚ÇÅ ‚â§ f‚ÇÇ) (hg : g‚ÇÅ ‚â§ g‚ÇÇ) : f‚ÇÅ * g‚ÇÅ ‚â§ f‚ÇÇ * g‚ÇÇ := sorry

theorem ne_bot.add {Œ± : Type u} [add_monoid Œ±] {f : filter Œ±} {g : filter Œ±} : ne_bot f ‚Üí ne_bot g ‚Üí ne_bot (f + g) := sorry

protected theorem add_assoc {Œ± : Type u} [add_monoid Œ±] (f : filter Œ±) (g : filter Œ±) (h : filter Œ±) : f + g + h = f + (g + h) := sorry

protected theorem one_mul {Œ± : Type u} [monoid Œ±] (f : filter Œ±) : 1 * f = f := sorry

protected theorem add_zero {Œ± : Type u} [add_monoid Œ±] (f : filter Œ±) : f + 0 = f := sorry

protected instance monoid {Œ± : Type u} [monoid Œ±] : monoid (filter Œ±) :=
  monoid.mk Mul.mul filter.mul_assoc 1 filter.one_mul filter.mul_one

protected theorem map_add {Œ± : Type u} {Œ≤ : Type v} [add_monoid Œ±] [add_monoid Œ≤] (m : Œ± ‚Üí Œ≤) [is_add_hom m] {f‚ÇÅ : filter Œ±} {f‚ÇÇ : filter Œ±} : map m (f‚ÇÅ + f‚ÇÇ) = map m f‚ÇÅ + map m f‚ÇÇ := sorry

protected theorem map_one {Œ± : Type u} {Œ≤ : Type v} [monoid Œ±] [monoid Œ≤] (m : Œ± ‚Üí Œ≤) [is_monoid_hom m] : map m 1 = 1 := sorry

-- TODO: prove similar statements when `m` is group homomorphism etc.

theorem Mathlib.map.is_add_monoid_hom {Œ± : Type u} {Œ≤ : Type v} [add_monoid Œ±] [add_monoid Œ≤] (m : Œ± ‚Üí Œ≤) [is_add_monoid_hom m] : is_add_monoid_hom (map m) :=
  is_add_monoid_hom.mk (filter.map_zero m)

-- The other direction does not hold in general.

theorem comap_mul_comap_le {Œ± : Type u} {Œ≤ : Type v} [monoid Œ±] [monoid Œ≤] (m : Œ± ‚Üí Œ≤) [is_mul_hom m] {f‚ÇÅ : filter Œ≤} {f‚ÇÇ : filter Œ≤} : comap m f‚ÇÅ * comap m f‚ÇÇ ‚â§ comap m (f‚ÇÅ * f‚ÇÇ) := sorry

theorem tendsto.mul_mul {Œ± : Type u} {Œ≤ : Type v} [monoid Œ±] [monoid Œ≤] {m : Œ± ‚Üí Œ≤} [is_mul_hom m] {f‚ÇÅ : filter Œ±} {g‚ÇÅ : filter Œ±} {f‚ÇÇ : filter Œ≤} {g‚ÇÇ : filter Œ≤} : tendsto m f‚ÇÅ f‚ÇÇ ‚Üí tendsto m g‚ÇÅ g‚ÇÇ ‚Üí tendsto m (f‚ÇÅ * g‚ÇÅ) (f‚ÇÇ * g‚ÇÇ) :=
  fun (hf : tendsto m f‚ÇÅ f‚ÇÇ) (hg : tendsto m g‚ÇÅ g‚ÇÇ) =>
    eq.mpr (id (Eq._oldrec (Eq.refl (tendsto m (f‚ÇÅ * g‚ÇÅ) (f‚ÇÇ * g‚ÇÇ))) (tendsto.equations._eqn_1 m (f‚ÇÅ * g‚ÇÅ) (f‚ÇÇ * g‚ÇÇ))))
      (eq.mpr (id (Eq._oldrec (Eq.refl (map m (f‚ÇÅ * g‚ÇÅ) ‚â§ f‚ÇÇ * g‚ÇÇ)) (filter.map_mul m))) (filter.mul_le_mul hf hg))

