/-
Copyright (c) 2018 Johannes Hölzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes Hölzl
-/
import Mathlib.PrePort
import Mathlib.Lean3Lib.init.default
import Mathlib.topology.category.Top.basic
import Mathlib.measure_theory.giry_monad
import Mathlib.category_theory.monad.algebra
import Mathlib.PostPort

universes u u_1 

namespace Mathlib

/-
* Meas, the category of measurable spaces

Measurable spaces and measurable functions form a (concrete) category Meas.

Measure : Meas ⥤ Meas is the functor which sends a measurable space X
to the space of measures on X; it is a monad (the "Giry monad").

Borel : Top ⥤ Meas sends a topological space X to X equipped with the
σ-algebra of Borel sets (the σ-algebra generated by the open subsets of X).

## Tags

measurable space, giry monad, borel

-/

/-- The category of measurable spaces and measurable functions. -/
def Meas :=
  category_theory.bundled measurable_space

namespace Meas


protected instance measurable_space (X : Meas) : measurable_space ↥X :=
  category_theory.bundled.str X

/-- Construct a bundled `Meas` from the underlying type and the typeclass. -/
def of (α : Type u) [measurable_space α] : Meas :=
  category_theory.bundled.mk α

@[simp] theorem coe_of (X : Type u) [measurable_space X] : ↥(of X) = X :=
  rfl

protected instance unbundled_hom : category_theory.unbundled_hom measurable :=
  category_theory.unbundled_hom.mk measurable_id measurable.comp

protected instance large_category : category_theory.large_category Meas :=
  category_theory.bundled_hom.category
    fun (α β : Type u_1) (Iα : measurable_space α) (Iβ : measurable_space β) => Subtype measurable

protected instance inhabited : Inhabited Meas :=
  { default := of empty }

/-- `Measure X` is the measurable space of measures over the measurable space `X`. It is the
weakest measurable space, s.t. λμ, μ s is measurable for all measurable sets `s` in `X`. An
important purpose is to assign a monadic structure on it, the Giry monad. In the Giry monad,
the pure values are the Dirac measure, and the bind operation maps to the integral:
`(μ >>= ν) s = ∫ x. (ν x) s dμ`.

In probability theory, the `Meas`-morphisms `X → Prob X` are (sub-)Markov kernels (here `Prob` is
the restriction of `Measure` to (sub-)probability space.)
-/
def Measure : Meas ⥤ Meas :=
  category_theory.functor.mk
    (fun (X : Meas) => category_theory.bundled.mk (measure_theory.measure (category_theory.bundled.α X)))
    fun (X Y : Meas) (f : X ⟶ Y) => { val := ⇑(measure_theory.measure.map ↑f), property := sorry }

/-- The Giry monad, i.e. the monadic structure associated with `Measure`. -/
protected instance Measure.category_theory.monad : category_theory.monad Measure :=
  category_theory.monad.mk
    (category_theory.nat_trans.mk fun (X : Meas) => { val := measure_theory.measure.dirac, property := sorry })
    (category_theory.nat_trans.mk fun (X : Meas) => { val := measure_theory.measure.join, property := sorry })

/-- An example for an algebra on `Measure`: the nonnegative Lebesgue integral is a hom, behaving
nicely under the monad operations. -/
def Integral : category_theory.monad.algebra Measure :=
  category_theory.monad.algebra.mk (of ennreal)
    { val := fun (m : measure_theory.measure ennreal) => measure_theory.lintegral m fun (x : ennreal) => x,
      property := sorry }

end Meas


protected instance Top.has_forget_to_Meas : category_theory.has_forget₂ Top Meas :=
  category_theory.bundled_hom.mk_has_forget₂ borel
    (fun (X Y : category_theory.bundled topological_space) (f : X ⟶ Y) =>
      { val := continuous_map.to_fun f, property := sorry })
    sorry

/-- The Borel functor, the canonical embedding of topological spaces into measurable spaces. -/
def Borel : Top ⥤ Meas :=
  category_theory.forget₂ Top Meas

