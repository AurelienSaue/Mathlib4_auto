/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Tim Baumann, Stephen Morgan, Scott Morrison, Floris van Doorn

Defines natural transformations between functors.

Introduces notations
  `œÑ.app X` for the components of natural transformations,
  `F ‚ü∂ G` for the type of natural transformations between functors `F` and `G`,
  `œÉ ‚â´ œÑ` for vertical compositions, and
  `œÉ ‚ó´ œÑ` for horizontal compositions.
-/
import Mathlib.PrePort
import Mathlib.Lean3Lib.init.default
import Mathlib.category_theory.functor
import Mathlib.PostPort

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ l 

namespace Mathlib

namespace category_theory


/--
`nat_trans F G` represents a natural transformation between functors `F` and `G`.

The field `app` provides the components of the natural transformation.

Naturality is expressed by `Œ±.naturality_lemma`.
-/
structure nat_trans {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] (F : C ‚•§ D) (G : C ‚•§ D) 
where
  app : (X : C) ‚Üí functor.obj F X ‚ü∂ functor.obj G X
  naturality' : autoParam (‚àÄ {X Y : C} (f : X ‚ü∂ Y), functor.map F f ‚â´ app Y = app X ‚â´ functor.map G f)
  (Lean.Syntax.ident Lean.SourceInfo.none (String.toSubstring "Mathlib.obviously")
    (Lean.Name.mkStr (Lean.Name.mkStr Lean.Name.anonymous "Mathlib") "obviously") [])

-- Rather arbitrarily, we say that the 'simpler' form is

@[simp] theorem nat_trans.naturality {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} (c : nat_trans F G) {X : C} {Y : C} (f : X ‚ü∂ Y) : functor.map F f ‚â´ nat_trans.app c Y = nat_trans.app c X ‚â´ functor.map G f := sorry

-- components of natural transfomations moving earlier.

@[simp] theorem nat_trans.naturality_assoc {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} (c : nat_trans F G) {X : C} {Y : C} (f : X ‚ü∂ Y) {X' : D} (f' : functor.obj G Y ‚ü∂ X') : functor.map F f ‚â´ nat_trans.app c Y ‚â´ f' = nat_trans.app c X ‚â´ functor.map G f ‚â´ f' := sorry

theorem congr_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} {Œ± : nat_trans F G} {Œ≤ : nat_trans F G} (h : Œ± = Œ≤) (X : C) : nat_trans.app Œ± X = nat_trans.app Œ≤ X :=
  congr_fun (congr_arg nat_trans.app h) X

namespace nat_trans


/-- `nat_trans.id F` is the identity natural transformation on a functor `F`. -/
protected def id {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] (F : C ‚•§ D) : nat_trans F F :=
  mk fun (X : C) => ùüô

@[simp] theorem id_app' {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] (F : C ‚•§ D) (X : C) : app (nat_trans.id F) X = ùüô :=
  rfl

protected instance inhabited {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] (F : C ‚•§ D) : Inhabited (nat_trans F F) :=
  { default := nat_trans.id F }

/-- `vcomp Œ± Œ≤` is the vertical compositions of natural transformations. -/
def vcomp {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : nat_trans F G) (Œ≤ : nat_trans G H) : nat_trans F H :=
  mk fun (X : C) => app Œ± X ‚â´ app Œ≤ X

-- functor_category will rewrite (vcomp Œ± Œ≤) to (Œ± ‚â´ Œ≤), so this is not a

-- suitable simp lemma.  We will declare the variant vcomp_app' there.

theorem vcomp_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : nat_trans F G) (Œ≤ : nat_trans G H) (X : C) : app (vcomp Œ± Œ≤) X = app Œ± X ‚â´ app Œ≤ X :=
  rfl

