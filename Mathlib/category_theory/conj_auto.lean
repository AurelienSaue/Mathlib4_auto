/-
Copyright (c) 2019 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import PrePort
import Lean3Lib.init.default
import Mathlib.category_theory.endomorphism
import Mathlib.algebra.group_power.default
import PostPort

universes u v v‚ÇÅ u‚ÇÅ 

namespace Mathlib

/-!
# Conjugate morphisms by isomorphisms

An isomorphism `Œ± : X ‚âÖ Y` defines
- a monoid isomorphism `conj : End X ‚âÉ* End Y` by `Œ±.conj f = Œ±.inv ‚â´ f ‚â´ Œ±.hom`;
- a group isomorphism `conj_Aut : Aut X ‚âÉ* Aut Y` by `Œ±.conj_Aut f = Œ±.symm ‚â™‚â´ f ‚â™‚â´ Œ±`.

For completeness, we also define `hom_congr : (X ‚âÖ X‚ÇÅ) ‚Üí (Y ‚âÖ Y‚ÇÅ) ‚Üí (X ‚ü∂ Y) ‚âÉ (X‚ÇÅ ‚ü∂ Y‚ÇÅ)`, cf. `equiv.arrow_congr`.
-/

namespace category_theory


namespace iso


/-- If `X` is isomorphic to `X‚ÇÅ` and `Y` is isomorphic to `Y‚ÇÅ`, then
there is a natural bijection between `X ‚ü∂ Y` and `X‚ÇÅ ‚ü∂ Y‚ÇÅ`. See also `equiv.arrow_congr`. -/
def hom_congr {C : Type u} [category C] {X : C} {Y : C} {X‚ÇÅ : C} {Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) : (X ‚ü∂ Y) ‚âÉ (X‚ÇÅ ‚ü∂ Y‚ÇÅ) :=
  equiv.mk (fun (f : X ‚ü∂ Y) => inv Œ± ‚â´ f ‚â´ hom Œ≤) (fun (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) => hom Œ± ‚â´ f ‚â´ inv Œ≤) sorry sorry

@[simp] theorem hom_congr_apply {C : Type u} [category C] {X : C} {Y : C} {X‚ÇÅ : C} {Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (f : X ‚ü∂ Y) : coe_fn (hom_congr Œ± Œ≤) f = inv Œ± ‚â´ f ‚â´ hom Œ≤ :=
  rfl

theorem hom_congr_comp {C : Type u} [category C] {X : C} {Y : C} {Z : C} {X‚ÇÅ : C} {Y‚ÇÅ : C} {Z‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (Œ≥ : Z ‚âÖ Z‚ÇÅ) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : coe_fn (hom_congr Œ± Œ≥) (f ‚â´ g) = coe_fn (hom_congr Œ± Œ≤) f ‚â´ coe_fn (hom_congr Œ≤ Œ≥) g := sorry

@[simp] theorem hom_congr_refl {C : Type u} [category C] {X : C} {Y : C} (f : X ‚ü∂ Y) : coe_fn (hom_congr (refl X) (refl Y)) f = f := sorry

@[simp] theorem hom_congr_trans {C : Type u} [category C] {X‚ÇÅ : C} {Y‚ÇÅ : C} {X‚ÇÇ : C} {Y‚ÇÇ : C} {X‚ÇÉ : C} {Y‚ÇÉ : C} (Œ±‚ÇÅ : X‚ÇÅ ‚âÖ X‚ÇÇ) (Œ≤‚ÇÅ : Y‚ÇÅ ‚âÖ Y‚ÇÇ) (Œ±‚ÇÇ : X‚ÇÇ ‚âÖ X‚ÇÉ) (Œ≤‚ÇÇ : Y‚ÇÇ ‚âÖ Y‚ÇÉ) (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) : coe_fn (hom_congr (Œ±‚ÇÅ ‚â™‚â´ Œ±‚ÇÇ) (Œ≤‚ÇÅ ‚â™‚â´ Œ≤‚ÇÇ)) f = coe_fn (equiv.trans (hom_congr Œ±‚ÇÅ Œ≤‚ÇÅ) (hom_congr Œ±‚ÇÇ Œ≤‚ÇÇ)) f := sorry

@[simp] theorem hom_congr_symm {C : Type u} [category C] {X‚ÇÅ : C} {Y‚ÇÅ : C} {X‚ÇÇ : C} {Y‚ÇÇ : C} (Œ± : X‚ÇÅ ‚âÖ X‚ÇÇ) (Œ≤ : Y‚ÇÅ ‚âÖ Y‚ÇÇ) : equiv.symm (hom_congr Œ± Œ≤) = hom_congr (symm Œ±) (symm Œ≤) :=
  rfl

/-- An isomorphism between two objects defines a monoid isomorphism between their
monoid of endomorphisms. -/
def conj {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) : End X ‚âÉ* End Y :=
  mul_equiv.mk (equiv.to_fun (hom_congr Œ± Œ±)) (equiv.inv_fun (hom_congr Œ± Œ±)) sorry sorry sorry

theorem conj_apply {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : End X) : coe_fn (conj Œ±) f = inv Œ± ‚â´ f ‚â´ hom Œ± :=
  rfl

@[simp] theorem conj_comp {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : End X) (g : End X) : coe_fn (conj Œ±) (f ‚â´ g) = coe_fn (conj Œ±) f ‚â´ coe_fn (conj Œ±) g :=
  mul_equiv.map_mul (conj Œ±) g f

@[simp] theorem conj_id {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) : coe_fn (conj Œ±) ùüô = ùüô :=
  mul_equiv.map_one (conj Œ±)

@[simp] theorem refl_conj {C : Type u} [category C] {X : C} (f : End X) : coe_fn (conj (refl X)) f = f := sorry

@[simp] theorem trans_conj {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) {Z : C} (Œ≤ : Y ‚âÖ Z) (f : End X) : coe_fn (conj (Œ± ‚â™‚â´ Œ≤)) f = coe_fn (conj Œ≤) (coe_fn (conj Œ±) f) :=
  hom_congr_trans Œ± Œ± Œ≤ Œ≤ f

@[simp] theorem symm_self_conj {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : End X) : coe_fn (conj (symm Œ±)) (coe_fn (conj Œ±) f) = f :=
  eq.mpr (id (Eq._oldrec (Eq.refl (coe_fn (conj (symm Œ±)) (coe_fn (conj Œ±) f) = f)) (Eq.symm (trans_conj Œ± (symm Œ±) f))))
    (eq.mpr (id (Eq._oldrec (Eq.refl (coe_fn (conj (Œ± ‚â™‚â´ symm Œ±)) f = f)) (self_symm_id Œ±)))
      (eq.mpr (id (Eq._oldrec (Eq.refl (coe_fn (conj (refl X)) f = f)) (refl_conj f))) (Eq.refl f)))

@[simp] theorem self_symm_conj {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : End Y) : coe_fn (conj Œ±) (coe_fn (conj (symm Œ±)) f) = f :=
  symm_self_conj (symm Œ±) f

@[simp] theorem conj_pow {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : End X) (n : ‚Ñï) : coe_fn (conj Œ±) (f ^ n) = coe_fn (conj Œ±) f ^ n :=
  monoid_hom.map_pow (mul_equiv.to_monoid_hom (conj Œ±)) f n

/-- `conj` defines a group isomorphisms between groups of automorphisms -/
def conj_Aut {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) : Aut X ‚âÉ* Aut Y :=
  mul_equiv.trans (mul_equiv.symm (Aut.units_End_equiv_Aut X))
    (mul_equiv.trans (units.map_equiv (conj Œ±)) (Aut.units_End_equiv_Aut Y))

theorem conj_Aut_apply {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : Aut X) : coe_fn (conj_Aut Œ±) f = symm Œ± ‚â™‚â´ f ‚â™‚â´ Œ± := sorry

@[simp] theorem conj_Aut_hom {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : Aut X) : hom (coe_fn (conj_Aut Œ±) f) = coe_fn (conj Œ±) (hom f) :=
  rfl

@[simp] theorem trans_conj_Aut {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) {Z : C} (Œ≤ : Y ‚âÖ Z) (f : Aut X) : coe_fn (conj_Aut (Œ± ‚â™‚â´ Œ≤)) f = coe_fn (conj_Aut Œ≤) (coe_fn (conj_Aut Œ±) f) := sorry

@[simp] theorem conj_Aut_mul {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : Aut X) (g : Aut X) : coe_fn (conj_Aut Œ±) (f * g) = coe_fn (conj_Aut Œ±) f * coe_fn (conj_Aut Œ±) g :=
  mul_equiv.map_mul (conj_Aut Œ±) f g

@[simp] theorem conj_Aut_trans {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : Aut X) (g : Aut X) : coe_fn (conj_Aut Œ±) (f ‚â™‚â´ g) = coe_fn (conj_Aut Œ±) f ‚â™‚â´ coe_fn (conj_Aut Œ±) g :=
  conj_Aut_mul Œ± g f

@[simp] theorem conj_Aut_pow {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : Aut X) (n : ‚Ñï) : coe_fn (conj_Aut Œ±) (f ^ n) = coe_fn (conj_Aut Œ±) f ^ n :=
  monoid_hom.map_pow (mul_equiv.to_monoid_hom (conj_Aut Œ±)) f n

@[simp] theorem conj_Aut_gpow {C : Type u} [category C] {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : Aut X) (n : ‚Ñ§) : coe_fn (conj_Aut Œ±) (f ^ n) = coe_fn (conj_Aut Œ±) f ^ n :=
  monoid_hom.map_gpow (mul_equiv.to_monoid_hom (conj_Aut Œ±)) f n

end iso


namespace functor


theorem map_hom_congr {C : Type u} [category C] {D : Type u‚ÇÅ} [category D] (F : C ‚•§ D) {X : C} {Y : C} {X‚ÇÅ : C} {Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (f : X ‚ü∂ Y) : map F (coe_fn (iso.hom_congr Œ± Œ≤) f) = coe_fn (iso.hom_congr (map_iso F Œ±) (map_iso F Œ≤)) (map F f) := sorry

theorem map_conj {C : Type u} [category C] {D : Type u‚ÇÅ} [category D] (F : C ‚•§ D) {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : End X) : map F (coe_fn (iso.conj Œ±) f) = coe_fn (iso.conj (map_iso F Œ±)) (map F f) :=
  map_hom_congr F Œ± Œ± f

theorem map_conj_Aut {C : Type u} [category C] {D : Type u‚ÇÅ} [category D] (F : C ‚•§ D) {X : C} {Y : C} (Œ± : X ‚âÖ Y) (f : Aut X) : map_iso F (coe_fn (iso.conj_Aut Œ±) f) = coe_fn (iso.conj_Aut (map_iso F Œ±)) (map_iso F f) := sorry

