/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Bhavik Mehta
-/
import Mathlib.PrePort
import Mathlib.Lean3Lib.init.default
import Mathlib.category_theory.adjunction.basic
import Mathlib.category_theory.conj
import Mathlib.category_theory.yoneda
import Mathlib.PostPort

universes u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ 

namespace Mathlib

/-!
# Mate of natural transformations

This file establishes the bijection between the 2-cells

         L‚ÇÅ                  R‚ÇÅ
      C --‚Üí D             C ‚Üê-- D
    G ‚Üì  ‚Üó  ‚Üì H         G ‚Üì  ‚Üò  ‚Üì H
      E --‚Üí F             E ‚Üê-- F
         L‚ÇÇ                  R‚ÇÇ

where `L‚ÇÅ ‚ä£ R‚ÇÅ` and `L‚ÇÇ ‚ä£ R‚ÇÇ`, and shows that in the special case where `G,H` are identity then the
bijection preserves and reflects isomorphisms (i.e. we have bijections `(L‚ÇÇ ‚ü∂ L‚ÇÅ) ‚âÉ (R‚ÇÅ ‚ü∂ R‚ÇÇ)`, and
if either side is an iso then the other side is as well).

On its own, this bijection is not particularly useful but it includes a number of interesting cases
as specializations.

For instance, this generalises the fact that adjunctions are unique (since if `L‚ÇÅ ‚âÖ L‚ÇÇ` then we
deduce `R‚ÇÅ ‚âÖ R‚ÇÇ`).
Another example arises from considering the square representing that a functor `H` preserves
products, in particular the morphism `HA ‚®Ø H- ‚ü∂ H(A ‚®Ø -)`. Then provided `(A ‚®Ø -)` and `HA ‚®Ø -` have
left adjoints (for instance if the relevant categories are cartesian closed), the transferred
natural transformation is the exponential comparison morphism: `H(A ^ -) ‚ü∂ HA ^ H-`.
Furthermore if `H` has a left adjoint `L`, this morphism is an isomorphism iff its mate
`L(HA ‚®Ø -) ‚ü∂ A ‚®Ø L-` is an isomorphism, see
https://ncatlab.org/nlab/show/Frobenius+reciprocity#InCategoryTheory.
This also relates to Grothendieck's yoga of six operations, though this is not spelled out in
mathlib: https://ncatlab.org/nlab/show/six+operations.
-/

namespace category_theory


/--
Suppose we have a square of functors (where the top and bottom are adjunctions `L‚ÇÅ ‚ä£ R‚ÇÅ` and
`L‚ÇÇ ‚ä£ R‚ÇÇ` respectively).

      C ‚Üî D
    G ‚Üì   ‚Üì H
      E ‚Üî F

Then we have a bijection between natural transformations `G ‚ãô L‚ÇÇ ‚ü∂ L‚ÇÅ ‚ãô H` and
`R‚ÇÅ ‚ãô G ‚ü∂ H ‚ãô R‚ÇÇ`.
This can be seen as a bijection of the 2-cells:

         L‚ÇÅ                  R‚ÇÅ
      C --‚Üí D             C ‚Üê-- D
    G ‚Üì  ‚Üó  ‚Üì H         G ‚Üì  ‚Üò  ‚Üì H
      E --‚Üí F             E ‚Üê-- F
         L‚ÇÇ                  R‚ÇÇ

Note that if one of the transformations is an iso, it does not imply the other is an iso.
-/
def transfer_nat_trans {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {E : Type u‚ÇÉ} {F : Type u‚ÇÑ} [category E] [category F] {G : C ‚•§ E} {H : D ‚•§ F} {L‚ÇÅ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {L‚ÇÇ : E ‚•§ F} {R‚ÇÇ : F ‚•§ E} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) : (G ‚ãô L‚ÇÇ ‚ü∂ L‚ÇÅ ‚ãô H) ‚âÉ (R‚ÇÅ ‚ãô G ‚ü∂ H ‚ãô R‚ÇÇ) :=
  equiv.mk
    (fun (h : G ‚ãô L‚ÇÇ ‚ü∂ L‚ÇÅ ‚ãô H) =>
      nat_trans.mk
        fun (X : D) =>
          nat_trans.app (adjunction.unit adj‚ÇÇ) (functor.obj G (functor.obj R‚ÇÅ X)) ‚â´
            functor.map R‚ÇÇ
              (nat_trans.app h (functor.obj R‚ÇÅ X) ‚â´ functor.map H (nat_trans.app (adjunction.counit adj‚ÇÅ) X)))
    (fun (h : R‚ÇÅ ‚ãô G ‚ü∂ H ‚ãô R‚ÇÇ) =>
      nat_trans.mk
        fun (X : C) =>
          functor.map L‚ÇÇ (functor.map G (nat_trans.app (adjunction.unit adj‚ÇÅ) X) ‚â´ nat_trans.app h (functor.obj L‚ÇÅ X)) ‚â´
            nat_trans.app (adjunction.counit adj‚ÇÇ) (functor.obj H (functor.obj L‚ÇÅ X)))
    sorry sorry

theorem transfer_nat_trans_counit {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {E : Type u‚ÇÉ} {F : Type u‚ÇÑ} [category E] [category F] {G : C ‚•§ E} {H : D ‚•§ F} {L‚ÇÅ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {L‚ÇÇ : E ‚•§ F} {R‚ÇÇ : F ‚•§ E} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) (f : G ‚ãô L‚ÇÇ ‚ü∂ L‚ÇÅ ‚ãô H) (Y : D) : functor.map L‚ÇÇ (nat_trans.app (coe_fn (transfer_nat_trans adj‚ÇÅ adj‚ÇÇ) f) Y) ‚â´
    nat_trans.app (adjunction.counit adj‚ÇÇ) (functor.obj H Y) =
  nat_trans.app f (functor.obj R‚ÇÅ Y) ‚â´ functor.map H (nat_trans.app (adjunction.counit adj‚ÇÅ) Y) := sorry

theorem unit_transfer_nat_trans {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {E : Type u‚ÇÉ} {F : Type u‚ÇÑ} [category E] [category F] {G : C ‚•§ E} {H : D ‚•§ F} {L‚ÇÅ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {L‚ÇÇ : E ‚•§ F} {R‚ÇÇ : F ‚•§ E} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) (f : G ‚ãô L‚ÇÇ ‚ü∂ L‚ÇÅ ‚ãô H) (X : C) : functor.map G (nat_trans.app (adjunction.unit adj‚ÇÅ) X) ‚â´
    nat_trans.app (coe_fn (transfer_nat_trans adj‚ÇÅ adj‚ÇÇ) f) (functor.obj L‚ÇÅ X) =
  nat_trans.app (adjunction.unit adj‚ÇÇ) (functor.obj G (functor.obj ùü≠ X)) ‚â´
    functor.map R‚ÇÇ (nat_trans.app f (functor.obj ùü≠ X)) := sorry

/--
Given two adjunctions `L‚ÇÅ ‚ä£ R‚ÇÅ` and `L‚ÇÇ ‚ä£ R‚ÇÇ` both between categories `C`, `D`, there is a
bijection between natural transformations `L‚ÇÇ ‚ü∂ L‚ÇÅ` and natural transformations `R‚ÇÅ ‚ü∂ R‚ÇÇ`.
This is defined as a special case of `transfer_nat_trans`, where the two "vertical" functors are
identity.
TODO: Generalise to when the two vertical functors are equivalences rather than being exactly `ùü≠`.

Furthermore, this bijection preserves (and reflects) isomorphisms, i.e. a transformation is an iso
iff its image under the bijection is an iso, see eg `category_theory.transfer_nat_trans_self_iso`.
This is in contrast to the general case `transfer_nat_trans` which does not in general have this
property.
-/
def transfer_nat_trans_self {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) : (L‚ÇÇ ‚ü∂ L‚ÇÅ) ‚âÉ (R‚ÇÅ ‚ü∂ R‚ÇÇ) :=
  equiv.trans
    (equiv.trans (equiv.symm (iso.hom_congr (functor.left_unitor L‚ÇÇ) (functor.right_unitor L‚ÇÅ)))
      (transfer_nat_trans adj‚ÇÅ adj‚ÇÇ))
    (iso.hom_congr (functor.right_unitor R‚ÇÅ) (functor.left_unitor R‚ÇÇ))

theorem transfer_nat_trans_self_counit {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) (f : L‚ÇÇ ‚ü∂ L‚ÇÅ) (X : D) : functor.map L‚ÇÇ (nat_trans.app (coe_fn (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ) f) X) ‚â´
    nat_trans.app (adjunction.counit adj‚ÇÇ) X =
  nat_trans.app f (functor.obj R‚ÇÅ X) ‚â´ nat_trans.app (adjunction.counit adj‚ÇÅ) X := sorry

theorem unit_transfer_nat_trans_self {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) (f : L‚ÇÇ ‚ü∂ L‚ÇÅ) (X : C) : nat_trans.app (adjunction.unit adj‚ÇÅ) X ‚â´
    nat_trans.app (coe_fn (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ) f) (functor.obj L‚ÇÅ X) =
  nat_trans.app (adjunction.unit adj‚ÇÇ) X ‚â´ functor.map R‚ÇÇ (nat_trans.app f X) := sorry

@[simp] theorem transfer_nat_trans_self_id {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) : coe_fn (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÅ) ùüô = ùüô := sorry

@[simp] theorem transfer_nat_trans_self_symm_id {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) : coe_fn (equiv.symm (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÅ)) ùüô = ùüô := sorry

theorem transfer_nat_trans_self_comp {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {L‚ÇÉ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} {R‚ÇÉ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) (adj‚ÇÉ : L‚ÇÉ ‚ä£ R‚ÇÉ) (f : L‚ÇÇ ‚ü∂ L‚ÇÅ) (g : L‚ÇÉ ‚ü∂ L‚ÇÇ) : coe_fn (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ) f ‚â´ coe_fn (transfer_nat_trans_self adj‚ÇÇ adj‚ÇÉ) g =
  coe_fn (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÉ) (g ‚â´ f) := sorry

theorem transfer_nat_trans_self_symm_comp {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {L‚ÇÉ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} {R‚ÇÉ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) (adj‚ÇÉ : L‚ÇÉ ‚ä£ R‚ÇÉ) (f : R‚ÇÇ ‚ü∂ R‚ÇÅ) (g : R‚ÇÉ ‚ü∂ R‚ÇÇ) : coe_fn (equiv.symm (transfer_nat_trans_self adj‚ÇÇ adj‚ÇÅ)) f ‚â´ coe_fn (equiv.symm (transfer_nat_trans_self adj‚ÇÉ adj‚ÇÇ)) g =
  coe_fn (equiv.symm (transfer_nat_trans_self adj‚ÇÉ adj‚ÇÅ)) (g ‚â´ f) := sorry

theorem transfer_nat_trans_self_comm {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) {f : L‚ÇÇ ‚ü∂ L‚ÇÅ} {g : L‚ÇÅ ‚ü∂ L‚ÇÇ} (gf : g ‚â´ f = ùüô) : coe_fn (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ) f ‚â´ coe_fn (transfer_nat_trans_self adj‚ÇÇ adj‚ÇÅ) g = ùüô := sorry

theorem transfer_nat_trans_self_symm_comm {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) {f : R‚ÇÅ ‚ü∂ R‚ÇÇ} {g : R‚ÇÇ ‚ü∂ R‚ÇÅ} (gf : g ‚â´ f = ùüô) : coe_fn (equiv.symm (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ)) f ‚â´ coe_fn (equiv.symm (transfer_nat_trans_self adj‚ÇÇ adj‚ÇÅ)) g =
  ùüô := sorry

/--
If `f` is an isomorphism, then the transferred natural transformation is an isomorphism.
The converse is given in `transfer_nat_trans_self_of_iso`.
-/
protected instance transfer_nat_trans_self_iso {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) (f : L‚ÇÇ ‚ü∂ L‚ÇÅ) [is_iso f] : is_iso (coe_fn (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ) f) :=
  is_iso.mk (coe_fn (transfer_nat_trans_self adj‚ÇÇ adj‚ÇÅ) (inv f))

/--
If `f` is an isomorphism, then the un-transferred natural transformation is an isomorphism.
The converse is given in `transfer_nat_trans_self_symm_of_iso`.
-/
protected instance transfer_nat_trans_self_symm_iso {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) (f : R‚ÇÅ ‚ü∂ R‚ÇÇ) [is_iso f] : is_iso (coe_fn (equiv.symm (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ)) f) :=
  is_iso.mk (coe_fn (equiv.symm (transfer_nat_trans_self adj‚ÇÇ adj‚ÇÅ)) (inv f))

/--
If `f` is a natural transformation whose transferred natural transformation is an isomorphism,
then `f` is an isomorphism.
The converse is given in `transfer_nat_trans_self_iso`.
-/
def transfer_nat_trans_self_of_iso {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) (f : L‚ÇÇ ‚ü∂ L‚ÇÅ) [is_iso (coe_fn (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ) f)] : is_iso f :=
  eq.mpr sorry
    (eq.mp sorry
      (category_theory.transfer_nat_trans_self_symm_iso adj‚ÇÅ adj‚ÇÇ (coe_fn (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ) f)))

/--
If `f` is a natural transformation whose un-transferred natural transformation is an isomorphism,
then `f` is an isomorphism.
The converse is given in `transfer_nat_trans_self_symm_iso`.
-/
def transfer_nat_trans_self_symm_of_iso {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category C] [category D] {L‚ÇÅ : C ‚•§ D} {L‚ÇÇ : C ‚•§ D} {R‚ÇÅ : D ‚•§ C} {R‚ÇÇ : D ‚•§ C} (adj‚ÇÅ : L‚ÇÅ ‚ä£ R‚ÇÅ) (adj‚ÇÇ : L‚ÇÇ ‚ä£ R‚ÇÇ) (f : R‚ÇÅ ‚ü∂ R‚ÇÇ) [is_iso (coe_fn (equiv.symm (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ)) f)] : is_iso f :=
  eq.mpr sorry
    (eq.mp sorry
      (category_theory.transfer_nat_trans_self_iso adj‚ÇÅ adj‚ÇÇ (coe_fn (equiv.symm (transfer_nat_trans_self adj‚ÇÅ adj‚ÇÇ)) f)))

