/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.PrePort
import Mathlib.Lean3Lib.init.default
import Mathlib.category_theory.hom_functor
import Mathlib.PostPort

universes u‚ÇÅ v‚ÇÅ l 

namespace Mathlib

/-!
# The Yoneda embedding

The Yoneda embedding as a functor `yoneda : C ‚•§ (C·µí·µñ ‚•§ Type v‚ÇÅ)`,
along with an instance that it is `fully_faithful`.

Also the Yoneda lemma, `yoneda_lemma : (yoneda_pairing C) ‚âÖ (yoneda_evaluation C)`.

## References
* [Stacks: Opposite Categories and the Yoneda Lemma](https://stacks.math.columbia.edu/tag/001L)
-/

namespace category_theory


/--
The Yoneda embedding, as a functor from `C` into presheaves on `C`.

See https://stacks.math.columbia.edu/tag/001O.
-/
def yoneda {C : Type u‚ÇÅ} [category C] : C ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ :=
  functor.mk
    (fun (X : C) =>
      functor.mk (fun (Y : C·µí·µñ) => opposite.unop Y ‚ü∂ X)
        fun (Y Y' : C·µí·µñ) (f : Y ‚ü∂ Y') (g : opposite.unop Y ‚ü∂ X) => has_hom.hom.unop f ‚â´ g)
    fun (X X' : C) (f : X ‚ü∂ X') =>
      nat_trans.mk
        fun (Y : C·µí·µñ)
          (g :
          functor.obj
            (functor.mk (fun (Y : C·µí·µñ) => opposite.unop Y ‚ü∂ X)
              fun (Y Y' : C·µí·µñ) (f : Y ‚ü∂ Y') (g : opposite.unop Y ‚ü∂ X) => has_hom.hom.unop f ‚â´ g)
            Y) =>
          g ‚â´ f

/--
The co-Yoneda embedding, as a functor from `C·µí·µñ` into co-presheaves on `C`.
-/
@[simp] theorem coyoneda_obj_map {C : Type u‚ÇÅ} [category C] (X : C·µí·µñ) (Y : C) (Y' : C) (f : Y ‚ü∂ Y') (g : opposite.unop X ‚ü∂ Y) : functor.map (functor.obj coyoneda X) f g = g ‚â´ f :=
  Eq.refl (functor.map (functor.obj coyoneda X) f g)

namespace yoneda


theorem obj_map_id {C : Type u‚ÇÅ} [category C] {X : C} {Y : C} (f : opposite.op X ‚ü∂ opposite.op Y) : functor.map (functor.obj yoneda X) f ùüô = nat_trans.app (functor.map yoneda (has_hom.hom.unop f)) (opposite.op Y) ùüô := sorry

@[simp] theorem naturality {C : Type u‚ÇÅ} [category C] {X : C} {Y : C} (Œ± : functor.obj yoneda X ‚ü∂ functor.obj yoneda Y) {Z : C} {Z' : C} (f : Z ‚ü∂ Z') (h : Z' ‚ü∂ X) : f ‚â´ nat_trans.app Œ± (opposite.op Z') h = nat_trans.app Œ± (opposite.op Z) (f ‚â´ h) :=
  Eq.symm (functor_to_types.naturality (functor.obj yoneda X) (functor.obj yoneda Y) Œ± (has_hom.hom.op f) h)

/--
The Yoneda embedding is full.

See https://stacks.math.columbia.edu/tag/001P.
-/
protected instance yoneda_full {C : Type u‚ÇÅ} [category C] : full yoneda :=
  full.mk fun (X Y : C) (f : functor.obj yoneda X ‚ü∂ functor.obj yoneda Y) => nat_trans.app f (opposite.op X) ùüô

/--
The Yoneda embedding is faithful.

See https://stacks.math.columbia.edu/tag/001P.
-/
protected instance yoneda_faithful {C : Type u‚ÇÅ} [category C] : faithful yoneda :=
  faithful.mk

/-- Extensionality via Yoneda. The typical usage would be
```
-- Goal is `X ‚âÖ Y`

-- Goal is `X ‚âÖ Y`
apply yoneda.ext,
-- Goals are now functions `(Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y)`, `(Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X)`, and the fact that these

-- Goals are now functions `(Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y)`, `(Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X)`, and the fact that these
functions are inverses and natural in `Z`.
```
-/
def ext {C : Type u‚ÇÅ} [category C] (X : C) (Y : C) (p : {Z : C} ‚Üí (Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y)) (q : {Z : C} ‚Üí (Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X)) (h‚ÇÅ : ‚àÄ {Z : C} (f : Z ‚ü∂ X), q (p f) = f) (h‚ÇÇ : ‚àÄ {Z : C} (f : Z ‚ü∂ Y), p (q f) = f) (n : ‚àÄ {Z Z' : C} (f : Z' ‚ü∂ Z) (g : Z ‚ü∂ X), p (f ‚â´ g) = f ‚â´ p g) : X ‚âÖ Y :=
  preimage_iso (nat_iso.of_components (fun (Z : C·µí·µñ) => iso.mk p q) sorry)

/--
If `yoneda.map f` is an isomorphism, so was `f`.
-/
def is_iso {C : Type u‚ÇÅ} [category C] {X : C} {Y : C} (f : X ‚ü∂ Y) [is_iso (functor.map yoneda f)] : is_iso f :=
  is_iso_of_fully_faithful yoneda f

end yoneda


namespace coyoneda


@[simp] theorem naturality {C : Type u‚ÇÅ} [category C] {X : C·µí·µñ} {Y : C·µí·µñ} (Œ± : functor.obj coyoneda X ‚ü∂ functor.obj coyoneda Y) {Z : C} {Z' : C} (f : Z' ‚ü∂ Z) (h : opposite.unop X ‚ü∂ Z') : nat_trans.app Œ± Z' h ‚â´ f = nat_trans.app Œ± Z (h ‚â´ f) := sorry

protected instance coyoneda_full {C : Type u‚ÇÅ} [category C] : full coyoneda :=
  full.mk
    fun (X Y : C·µí·µñ) (f : functor.obj coyoneda X ‚ü∂ functor.obj coyoneda Y) =>
      has_hom.hom.op (nat_trans.app f (opposite.unop X) ùüô)

protected instance coyoneda_faithful {C : Type u‚ÇÅ} [category C] : faithful coyoneda :=
  faithful.mk

/--
If `coyoneda.map f` is an isomorphism, so was `f`.
-/
def is_iso {C : Type u‚ÇÅ} [category C] {X : C·µí·µñ} {Y : C·µí·µñ} (f : X ‚ü∂ Y) [is_iso (functor.map coyoneda f)] : is_iso f :=
  is_iso_of_fully_faithful coyoneda f

-- No need to use C·µí·µñ here, works with any category

/-- A Type-valued presheaf `P` is isomorphic to the composition of `P` with the
  coyoneda functor coming from `punit`. -/
@[simp] theorem iso_comp_punit_inv_app {C : Type u‚ÇÅ} [category C] (P : C ‚•§ Type v‚ÇÅ) (X : C) (a : functor.obj P X) (_x : opposite.unop (opposite.op PUnit)) : nat_trans.app (iso.inv (iso_comp_punit P)) X a _x = a :=
  Eq.refl (nat_trans.app (iso.inv (iso_comp_punit P)) X a _x)

end coyoneda


/--
A presheaf `F` is representable if there is object `X` so `F ‚âÖ yoneda.obj X`.

See https://stacks.math.columbia.edu/tag/001Q.
-/
-- TODO should we make this a Prop, merely asserting existence of such an object?

class representable {C : Type u‚ÇÅ} [category C] (F : C·µí·µñ ‚•§ Type v‚ÇÅ) 
where
  X : C
  w : functor.obj yoneda X ‚âÖ F

end category_theory


namespace category_theory


-- For the rest of the file, we are using product categories,

-- so need to restrict to the case morphisms are in 'Type', not 'Sort'.

-- We need to help typeclass inference with some awkward universe levels here.

protected instance prod_category_instance_1 (C : Type u‚ÇÅ) [category C] : category ((C·µí·µñ ‚•§ Type v‚ÇÅ) √ó (C·µí·µñ)) :=
  category_theory.prod (C·µí·µñ ‚•§ Type v‚ÇÅ) (C·µí·µñ)

protected instance prod_category_instance_2 (C : Type u‚ÇÅ) [category C] : category (C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) :=
  category_theory.prod (C·µí·µñ) (C·µí·µñ ‚•§ Type v‚ÇÅ)

/--
The "Yoneda evaluation" functor, which sends `X : C·µí·µñ` and `F : C·µí·µñ ‚•§ Type`
to `F.obj X`, functorially in both `X` and `F`.
-/
def yoneda_evaluation (C : Type u‚ÇÅ) [category C] : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ Type (max u‚ÇÅ v‚ÇÅ) :=
  evaluation_uncurried (C·µí·µñ) (Type v‚ÇÅ) ‚ãô ulift_functor

@[simp] theorem yoneda_evaluation_map_down (C : Type u‚ÇÅ) [category C] (P : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q) (x : functor.obj (yoneda_evaluation C) P) : ulift.down (functor.map (yoneda_evaluation C) Œ± x) =
  nat_trans.app (prod.snd Œ±) (prod.fst Q) (functor.map (prod.snd P) (prod.fst Œ±) (ulift.down x)) :=
  rfl

/--
The "Yoneda pairing" functor, which sends `X : C·µí·µñ` and `F : C·µí·µñ ‚•§ Type`
to `yoneda.op.obj X ‚ü∂ F`, functorially in both `X` and `F`.
-/
def yoneda_pairing (C : Type u‚ÇÅ) [category C] : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ Type (max u‚ÇÅ v‚ÇÅ) :=
  functor.prod (functor.op yoneda) ùü≠ ‚ãô functor.hom (C·µí·µñ ‚•§ Type v‚ÇÅ)

@[simp] theorem yoneda_pairing_map (C : Type u‚ÇÅ) [category C] (P : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q) (Œ≤ : functor.obj (yoneda_pairing C) P) : functor.map (yoneda_pairing C) Œ± Œ≤ = functor.map yoneda (has_hom.hom.unop (prod.fst Œ±)) ‚â´ Œ≤ ‚â´ prod.snd Œ± :=
  rfl

/--
The Yoneda lemma asserts that that the Yoneda pairing
`(X : C·µí·µñ, F : C·µí·µñ ‚•§ Type) ‚Ü¶ (yoneda.obj (unop X) ‚ü∂ F)`
is naturally isomorphic to the evaluation `(X, F) ‚Ü¶ F.obj X`.

See https://stacks.math.columbia.edu/tag/001P.
-/
def yoneda_lemma (C : Type u‚ÇÅ) [category C] : yoneda_pairing C ‚âÖ yoneda_evaluation C :=
  iso.mk
    (nat_trans.mk
      fun (F : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (x : functor.obj (yoneda_pairing C) F) => ulift.up (nat_trans.app x (prod.fst F) ùüô))
    (nat_trans.mk
      fun (F : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (x : functor.obj (yoneda_evaluation C) F) =>
        nat_trans.mk
          fun (X : C·µí·µñ)
            (a : functor.obj (opposite.unop (prod.fst (functor.obj (functor.prod (functor.op yoneda) ùü≠) F))) X) =>
            functor.map (prod.snd F) (has_hom.hom.op a) (ulift.down x))

/--
The isomorphism between `yoneda.obj X ‚ü∂ F` and `F.obj (op X)`
(we need to insert a `ulift` to get the universes right!)
given by the Yoneda lemma.
-/
@[simp] def yoneda_sections {C : Type u‚ÇÅ} [category C] (X : C) (F : C·µí·µñ ‚•§ Type v‚ÇÅ) : (functor.obj yoneda X ‚ü∂ F) ‚âÖ ulift (functor.obj F (opposite.op X)) :=
  iso.app (yoneda_lemma C) (opposite.op X, F)

/--
We have a type-level equivalence between natural transformations from the yoneda embedding
and elements of `F.obj X`, without any universe switching.
-/
def yoneda_equiv {C : Type u‚ÇÅ} [category C] {X : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} : (functor.obj yoneda X ‚ü∂ F) ‚âÉ functor.obj F (opposite.op X) :=
  equiv.trans (iso.to_equiv (yoneda_sections X F)) equiv.ulift

theorem yoneda_equiv_naturality {C : Type u‚ÇÅ} [category C] {X : C} {Y : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : functor.obj yoneda X ‚ü∂ F) (g : Y ‚ü∂ X) : functor.map F (has_hom.hom.op g) (coe_fn yoneda_equiv f) = coe_fn yoneda_equiv (functor.map yoneda g ‚â´ f) := sorry

@[simp] theorem yoneda_equiv_apply {C : Type u‚ÇÅ} [category C] {X : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : functor.obj yoneda X ‚ü∂ F) : coe_fn yoneda_equiv f = nat_trans.app f (opposite.op X) ùüô :=
  rfl

@[simp] theorem yoneda_equiv_symm_app_apply {C : Type u‚ÇÅ} [category C] {X : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (x : functor.obj F (opposite.op X)) (Y : C·µí·µñ) (f : opposite.unop Y ‚ü∂ X) : nat_trans.app (coe_fn (equiv.symm yoneda_equiv) x) Y f = functor.map F (has_hom.hom.op f) x :=
  rfl

/--
When `C` is a small category, we can restate the isomorphism from `yoneda_sections`
without having to change universes.
-/
def yoneda_sections_small {C : Type u‚ÇÅ} [small_category C] (X : C) (F : C·µí·µñ ‚•§ Type u‚ÇÅ) : (functor.obj yoneda X ‚ü∂ F) ‚âÖ functor.obj F (opposite.op X) :=
  yoneda_sections X F ‚â™‚â´ ulift_trivial (functor.obj F (opposite.op X))

@[simp] theorem yoneda_sections_small_hom {C : Type u‚ÇÅ} [small_category C] (X : C) (F : C·µí·µñ ‚•§ Type u‚ÇÅ) (f : functor.obj yoneda X ‚ü∂ F) : iso.hom (yoneda_sections_small X F) f = nat_trans.app f (opposite.op X) ùüô :=
  rfl

@[simp] theorem yoneda_sections_small_inv_app_apply {C : Type u‚ÇÅ} [small_category C] (X : C) (F : C·µí·µñ ‚•§ Type u‚ÇÅ) (t : functor.obj F (opposite.op X)) (Y : C·µí·µñ) (f : opposite.unop Y ‚ü∂ X) : nat_trans.app (iso.inv (yoneda_sections_small X F) t) Y f = functor.map F (has_hom.hom.op f) t :=
  rfl

