/-
Copyright (c) 2018 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.PrePort
import Mathlib.Lean3Lib.init.default
import Mathlib.category_theory.natural_isomorphism
import Mathlib.PostPort

universes u‚ÇÅ u‚ÇÇ u‚ÇÉ v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÑ v‚ÇÑ u‚ÇÖ v‚ÇÖ 

namespace Mathlib

namespace category_theory


/--
If `Œ± : G ‚ü∂ H` then
`whisker_left F Œ± : (F ‚ãô G) ‚ü∂ (F ‚ãô H)` has components `Œ±.app (F.obj X)`.
-/
@[simp] theorem whisker_left_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ}
    [category E] (F : C ‚•§ D) {G : D ‚•§ E} {H : D ‚•§ E} (Œ± : G ‚ü∂ H) (X : C) :
    nat_trans.app (whisker_left F Œ±) X = nat_trans.app Œ± (functor.obj F X) :=
  Eq.refl (nat_trans.app (whisker_left F Œ±) X)

/--
If `Œ± : G ‚ü∂ H` then
`whisker_right Œ± F : (G ‚ãô F) ‚ü∂ (G ‚ãô F)` has components `F.map (Œ±.app X)`.
-/
def whisker_right {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E]
    {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : G ‚ü∂ H) (F : D ‚•§ E) : G ‚ãô F ‚ü∂ H ‚ãô F :=
  nat_trans.mk fun (X : C) => functor.map F (nat_trans.app Œ± X)

/--
Left-composition gives a functor `(C ‚•§ D) ‚•§ ((D ‚•§ E) ‚•§ (C ‚•§ E))`.

`(whiskering_lift.obj F).obj G` is `F ‚ãô G`, and
`(whiskering_lift.obj F).map Œ±` is `whisker_left F Œ±`.
-/
def whiskering_left (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÇ) [category D] (E : Type u‚ÇÉ)
    [category E] : (C ‚•§ D) ‚•§ (D ‚•§ E) ‚•§ C ‚•§ E :=
  functor.mk
    (fun (F : C ‚•§ D) =>
      functor.mk (fun (G : D ‚•§ E) => F ‚ãô G) fun (G H : D ‚•§ E) (Œ± : G ‚ü∂ H) => whisker_left F Œ±)
    fun (F G : C ‚•§ D) (œÑ : F ‚ü∂ G) =>
      nat_trans.mk fun (H : D ‚•§ E) => nat_trans.mk fun (c : C) => functor.map H (nat_trans.app œÑ c)

/--
Right-composition gives a functor `(D ‚•§ E) ‚•§ ((C ‚•§ D) ‚•§ (C ‚•§ E))`.

`(whiskering_right.obj H).obj F` is `F ‚ãô H`, and
`(whiskering_right.obj H).map Œ±` is `whisker_right Œ± H`.
-/
@[simp] theorem whiskering_right_obj_map (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÇ) [category D]
    (E : Type u‚ÇÉ) [category E] (H : D ‚•§ E) (_x : C ‚•§ D) :
    ‚àÄ (_x_1 : C ‚•§ D) (Œ± : _x ‚ü∂ _x_1),
        functor.map (functor.obj (whiskering_right C D E) H) Œ± = whisker_right Œ± H :=
  fun (_x_1 : C ‚•§ D) (Œ± : _x ‚ü∂ _x_1) =>
    Eq.refl (functor.map (functor.obj (whiskering_right C D E) H) Œ±)

@[simp] theorem whisker_left_id {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ}
    [category E] (F : C ‚•§ D) {G : D ‚•§ E} : whisker_left F (nat_trans.id G) = nat_trans.id (F ‚ãô G) :=
  rfl

@[simp] theorem whisker_left_id' {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ}
    [category E] (F : C ‚•§ D) {G : D ‚•§ E} : whisker_left F ùüô = ùüô :=
  rfl

@[simp] theorem whisker_right_id {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ}
    [category E] {G : C ‚•§ D} (F : D ‚•§ E) :
    whisker_right (nat_trans.id G) F = nat_trans.id (G ‚ãô F) :=
  functor.map_id (functor.obj (whiskering_right C D E) F) G

@[simp] theorem whisker_right_id' {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] {G : C ‚•§ D} (F : D ‚•§ E) : whisker_right ùüô F = ùüô :=
  functor.map_id (functor.obj (whiskering_right C D E) F) G

@[simp] theorem whisker_left_comp {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D) {G : D ‚•§ E} {H : D ‚•§ E} {K : D ‚•§ E} (Œ± : G ‚ü∂ H)
    (Œ≤ : H ‚ü∂ K) : whisker_left F (Œ± ‚â´ Œ≤) = whisker_left F Œ± ‚â´ whisker_left F Œ≤ :=
  rfl

@[simp] theorem whisker_right_comp {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] {G : C ‚•§ D} {H : C ‚•§ D} {K : C ‚•§ D} (Œ± : G ‚ü∂ H) (Œ≤ : H ‚ü∂ K)
    (F : D ‚•§ E) : whisker_right (Œ± ‚â´ Œ≤) F = whisker_right Œ± F ‚â´ whisker_right Œ≤ F :=
  functor.map_comp (functor.obj (whiskering_right C D E) F) Œ± Œ≤

/--
If `Œ± : G ‚âÖ H` is a natural isomorphism then
`iso_whisker_left F Œ± : (F ‚ãô G) ‚âÖ (F ‚ãô H)` has components `Œ±.app (F.obj X)`.
-/
def iso_whisker_left {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ}
    [category E] (F : C ‚•§ D) {G : D ‚•§ E} {H : D ‚•§ E} (Œ± : G ‚âÖ H) : F ‚ãô G ‚âÖ F ‚ãô H :=
  functor.map_iso (functor.obj (whiskering_left C D E) F) Œ±

@[simp] theorem iso_whisker_left_hom {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D) {G : D ‚•§ E} {H : D ‚•§ E} (Œ± : G ‚âÖ H) :
    iso.hom (iso_whisker_left F Œ±) = whisker_left F (iso.hom Œ±) :=
  rfl

@[simp] theorem iso_whisker_left_inv {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D) {G : D ‚•§ E} {H : D ‚•§ E} (Œ± : G ‚âÖ H) :
    iso.inv (iso_whisker_left F Œ±) = whisker_left F (iso.inv Œ±) :=
  rfl

/--
If `Œ± : G ‚âÖ H` then
`iso_whisker_right Œ± F : (G ‚ãô F) ‚âÖ (G ‚ãô F)` has components `F.map_iso (Œ±.app X)`.
-/
def iso_whisker_right {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ}
    [category E] {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : G ‚âÖ H) (F : D ‚•§ E) : G ‚ãô F ‚âÖ H ‚ãô F :=
  functor.map_iso (functor.obj (whiskering_right C D E) F) Œ±

@[simp] theorem iso_whisker_right_hom {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : G ‚âÖ H) (F : D ‚•§ E) :
    iso.hom (iso_whisker_right Œ± F) = whisker_right (iso.hom Œ±) F :=
  rfl

@[simp] theorem iso_whisker_right_inv {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : G ‚âÖ H) (F : D ‚•§ E) :
    iso.inv (iso_whisker_right Œ± F) = whisker_right (iso.inv Œ±) F :=
  rfl

protected instance is_iso_whisker_left {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D) {G : D ‚•§ E} {H : D ‚•§ E} (Œ± : G ‚ü∂ H) [is_iso Œ±] :
    is_iso (whisker_left F Œ±) :=
  is_iso.mk (iso.inv (iso_whisker_left F (as_iso Œ±)))

protected instance is_iso_whisker_right {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : G ‚ü∂ H) (F : D ‚•§ E) [is_iso Œ±] :
    is_iso (whisker_right Œ± F) :=
  is_iso.mk (iso.inv (iso_whisker_right (as_iso Œ±) F))

@[simp] theorem whisker_left_twice {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] {B : Type u‚ÇÑ} [category B] (F : B ‚•§ C) (G : C ‚•§ D) {H : D ‚•§ E}
    {K : D ‚•§ E} (Œ± : H ‚ü∂ K) : whisker_left F (whisker_left G Œ±) = whisker_left (F ‚ãô G) Œ± :=
  rfl

@[simp] theorem whisker_right_twice {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D]
    {E : Type u‚ÇÉ} [category E] {B : Type u‚ÇÑ} [category B] {H : B ‚•§ C} {K : B ‚•§ C} (F : C ‚•§ D)
    (G : D ‚•§ E) (Œ± : H ‚ü∂ K) : whisker_right (whisker_right Œ± F) G = whisker_right Œ± (F ‚ãô G) :=
  rfl

theorem whisker_right_left {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ}
    [category E] {B : Type u‚ÇÑ} [category B] (F : B ‚•§ C) {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : G ‚ü∂ H)
    (K : D ‚•§ E) : whisker_right (whisker_left F Œ±) K = whisker_left F (whisker_right Œ± K) :=
  rfl

namespace functor


/--
The left unitor, a natural isomorphism `((ùü≠ _) ‚ãô F) ‚âÖ F`.
-/
@[simp] theorem left_unitor_hom_app {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÇ} [category B]
    (F : A ‚•§ B) (X : A) : nat_trans.app (iso.hom (left_unitor F)) X = ùüô :=
  Eq.refl (nat_trans.app (iso.hom (left_unitor F)) X)

/--
The right unitor, a natural isomorphism `(F ‚ãô (ùü≠ B)) ‚âÖ F`.
-/
@[simp] theorem right_unitor_hom_app {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÇ} [category B]
    (F : A ‚•§ B) (X : A) : nat_trans.app (iso.hom (right_unitor F)) X = ùüô :=
  Eq.refl (nat_trans.app (iso.hom (right_unitor F)) X)

/--
The associator for functors, a natural isomorphism `((F ‚ãô G) ‚ãô H) ‚âÖ (F ‚ãô (G ‚ãô H))`.

(In fact, `iso.refl _` will work here, but it tends to make Lean slow later,
and it's usually best to insert explicit associators.)
-/
@[simp] theorem associator_inv_app {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÇ} [category B]
    {C : Type u‚ÇÉ} [category C] {D : Type u‚ÇÑ} [category D] (F : A ‚•§ B) (G : B ‚•§ C) (H : C ‚•§ D)
    (_x : A) : nat_trans.app (iso.inv (associator F G H)) _x = ùüô :=
  Eq.refl (nat_trans.app (iso.inv (associator F G H)) _x)

theorem triangle {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÇ} [category B] {C : Type u‚ÇÉ} [category C]
    (F : A ‚•§ B) (G : B ‚•§ C) :
    iso.hom (associator F ùü≠ G) ‚â´ whisker_left F (iso.hom (left_unitor G)) =
        whisker_right (iso.hom (right_unitor F)) G :=
  sorry

theorem pentagon {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÇ} [category B] {C : Type u‚ÇÉ} [category C]
    {D : Type u‚ÇÑ} [category D] {E : Type u‚ÇÖ} [category E] (F : A ‚•§ B) (G : B ‚•§ C) (H : C ‚•§ D)
    (K : D ‚•§ E) :
    whisker_right (iso.hom (associator F G H)) K ‚â´
          iso.hom (associator F (G ‚ãô H) K) ‚â´ whisker_left F (iso.hom (associator G H K)) =
        iso.hom (associator (F ‚ãô G) H K) ‚â´ iso.hom (associator F G (H ‚ãô K)) :=
  sorry

end Mathlib