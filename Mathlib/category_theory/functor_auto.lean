/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Tim Baumann, Stephen Morgan, Scott Morrison

Defines a functor between categories.

(As it is a 'bundled' object rather than the `is_functorial` typeclass parametrised
by the underlying function on objects, the name is capitalised.)

Introduces notations
  `C ‚•§ D` for the type of all functors from `C` to `D`.
    (I would like a better arrow here, unfortunately ‚áí (`\functor`) is taken by core.)
-/
import PrePort
import Lean3Lib.init.default
import Mathlib.tactic.reassoc_axiom
import PostPort

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ l u‚ÇÉ v‚ÇÉ 

namespace Mathlib

namespace category_theory


/--
`functor C D` represents a functor between categories `C` and `D`.

To apply a functor `F` to an object use `F.obj X`, and to a morphism use `F.map f`.

The axiom `map_id` expresses preservation of identities, and
`map_comp` expresses functoriality.

See https://stacks.math.columbia.edu/tag/001B.
-/
structure functor (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÇ) [category D] 
where
  obj : C ‚Üí D
  map : {X Y : C} ‚Üí (X ‚ü∂ Y) ‚Üí (obj X ‚ü∂ obj Y)
  map_id' : autoParam (C ‚Üí map ùüô = ùüô)
  (Lean.Syntax.ident Lean.SourceInfo.none (String.toSubstring "Mathlib.obviously")
    (Lean.Name.mkStr (Lean.Name.mkStr Lean.Name.anonymous "Mathlib") "obviously") [])
  map_comp' : autoParam (‚àÄ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), map (f ‚â´ g) = map f ‚â´ map g)
  (Lean.Syntax.ident Lean.SourceInfo.none (String.toSubstring "Mathlib.obviously")
    (Lean.Name.mkStr (Lean.Name.mkStr Lean.Name.anonymous "Mathlib") "obviously") [])

infixr:26 " ‚•§ " => Mathlib.category_theory.functor

-- A functor is basically a function, so give ‚•§ a similar precedence to ‚Üí (25).

-- For example, `C √ó D ‚•§ E` should parse as `(C √ó D) ‚•§ E` not `C √ó (D ‚•§ E)`.

@[simp] theorem functor.map_id {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] (c : C ‚•§ D) (X : C) : functor.map c ùüô = ùüô := sorry

@[simp] theorem functor.map_comp {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] (c : C ‚•§ D) {X : C} {Y : C} {Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : functor.map c (f ‚â´ g) = functor.map c f ‚â´ functor.map c g := sorry

theorem functor.map_comp_assoc {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] (c : C ‚•§ D) {X : C} {Y : C} {Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) {X' : D} (f' : functor.obj c Z ‚ü∂ X') : functor.map c (f ‚â´ g) ‚â´ f' = functor.map c f ‚â´ functor.map c g ‚â´ f' := sorry

namespace functor


/-- `ùü≠ C` is the identity functor on a category `C`. -/
protected def id (C : Type u‚ÇÅ) [category C] : C ‚•§ C :=
  mk (fun (X : C) => X) fun (_x _x_1 : C) (f : _x ‚ü∂ _x_1) => f

notation:1024 "ùü≠" => Mathlib.category_theory.functor.id

protected instance inhabited (C : Type u‚ÇÅ) [category C] : Inhabited (C ‚•§ C) :=
  { default := ùü≠ }

@[simp] theorem id_obj {C : Type u‚ÇÅ} [category C] (X : C) : obj ùü≠ X = X :=
  rfl

@[simp] theorem id_map {C : Type u‚ÇÅ} [category C] {X : C} {Y : C} (f : X ‚ü∂ Y) : map ùü≠ f = f :=
  rfl

/--
`F ‚ãô G` is the composition of a functor `F` and a functor `G` (`F` first, then `G`).
-/
def comp {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D) (G : D ‚•§ E) : C ‚•§ E :=
  mk (fun (X : C) => obj G (obj F X)) fun (_x _x_1 : C) (f : _x ‚ü∂ _x_1) => map G (map F f)

infixr:80 " ‚ãô " => Mathlib.category_theory.functor.comp

@[simp] theorem comp_obj {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D) (G : D ‚•§ E) (X : C) : obj (F ‚ãô G) X = obj G (obj F X) :=
  rfl

@[simp] theorem comp_map {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D) (G : D ‚•§ E) {X : C} {Y : C} (f : X ‚ü∂ Y) : map (F ‚ãô G) f = map G (map F f) :=
  rfl

-- These are not simp lemmas because rewriting along equalities between functors

-- is not necessarily a good idea.

-- Natural isomorphisms are also provided in `whiskering.lean`.

protected theorem comp_id {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] (F : C ‚•§ D) : F ‚ãô ùü≠ = F := sorry

protected theorem id_comp {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] (F : C ‚•§ D) : ùü≠ ‚ãô F = F := sorry

