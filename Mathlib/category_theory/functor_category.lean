/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Tim Baumann, Stephen Morgan, Scott Morrison, Floris van Doorn
-/
import Mathlib.PrePort
import Mathlib.Lean3Lib.init.default
import Mathlib.category_theory.natural_transformation
import Mathlib.PostPort

universes u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÉ 

namespace Mathlib

namespace category_theory


/--
`functor.category C D` gives the category structure on functors and natural transformations
between categories `C` and `D`.

Notice that if `C` and `D` are both small categories at the same universe level,
this is another small category at that level.
However if `C` and `D` are both large categories at the same universe level,
this is a small category at the next higher level.
-/
protected instance functor.category (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÇ) [category D] : category (C ‚•§ D) :=
  category.mk

namespace nat_trans


@[simp] theorem vcomp_eq_comp {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) : vcomp Œ± Œ≤ = Œ± ‚â´ Œ≤ :=
  rfl

theorem vcomp_app' {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) (X : C) : app (Œ± ‚â´ Œ≤) X = app Œ± X ‚â´ app Œ≤ X :=
  rfl

theorem congr_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} {Œ± : F ‚ü∂ G} {Œ≤ : F ‚ü∂ G} (h : Œ± = Œ≤) (X : C) : app Œ± X = app Œ≤ X :=
  eq.mpr (id (Eq._oldrec (Eq.refl (app Œ± X = app Œ≤ X)) h)) (Eq.refl (app Œ≤ X))

@[simp] theorem id_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] (F : C ‚•§ D) (X : C) : app ùüô X = ùüô :=
  rfl

@[simp] theorem comp_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} {H : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) (X : C) : app (Œ± ‚â´ Œ≤) X = app Œ± X ‚â´ app Œ≤ X :=
  rfl

theorem app_naturality {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] {F : C ‚•§ D ‚•§ E} {G : C ‚•§ D ‚•§ E} (T : F ‚ü∂ G) (X : C) {Y : D} {Z : D} (f : Y ‚ü∂ Z) : functor.map (functor.obj F X) f ‚â´ app (app T X) Z = app (app T X) Y ‚â´ functor.map (functor.obj G X) f :=
  naturality (app T X) f

theorem naturality_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] {F : C ‚•§ D ‚•§ E} {G : C ‚•§ D ‚•§ E} (T : F ‚ü∂ G) (Z : D) {X : C} {Y : C} (f : X ‚ü∂ Y) : app (functor.map F f) Z ‚â´ app (app T Y) Z = app (app T X) Z ‚â´ app (functor.map G f) Z :=
  congr_fun (congr_arg app (naturality T f)) Z

/-- A natural transformation is a monomorphism if each component is. -/
theorem mono_app_of_mono {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} (Œ± : F ‚ü∂ G) [‚àÄ (X : C), mono (app Œ± X)] : mono Œ± := sorry

/-- A natural transformation is an epimorphism if each component is. -/
theorem epi_app_of_epi {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {F : C ‚•§ D} {G : C ‚•§ D} (Œ± : F ‚ü∂ G) [‚àÄ (X : C), epi (app Œ± X)] : epi Œ± := sorry

/-- `hcomp Œ± Œ≤` is the horizontal composition of natural transformations. -/
def hcomp {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] {F : C ‚•§ D} {G : C ‚•§ D} {H : D ‚•§ E} {I : D ‚•§ E} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) : F ‚ãô H ‚ü∂ G ‚ãô I :=
  mk fun (X : C) => app Œ≤ (functor.obj F X) ‚â´ functor.map I (app Œ± X)

infixl:80 " ‚ó´ " => Mathlib.category_theory.nat_trans.hcomp

@[simp] theorem hcomp_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] {F : C ‚•§ D} {G : C ‚•§ D} {H : D ‚•§ E} {I : D ‚•§ E} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (X : C) : app (Œ± ‚ó´ Œ≤) X = app Œ≤ (functor.obj F X) ‚â´ functor.map I (app Œ± X) :=
  rfl

@[simp] theorem hcomp_id_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] {F : C ‚•§ D} {G : C ‚•§ D} {H : D ‚•§ E} (Œ± : F ‚ü∂ G) (X : C) : app (Œ± ‚ó´ ùüô) X = functor.map H (app Œ± X) := sorry

theorem id_hcomp_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] {F : C ‚•§ D} {G : C ‚•§ D} {H : E ‚•§ C} (Œ± : F ‚ü∂ G) (X : E) : app (ùüô ‚ó´ Œ±) X = app Œ± (functor.obj H X) := sorry

-- Note that we don't yet prove a `hcomp_assoc` lemma here: even stating it is painful, because we

-- need to use associativity of functor composition. (It's true without the explicit associator,

-- because functor composition is definitionally associative, but relying on the definitional equality

-- causes bad problems with elaboration later.)

theorem exchange {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] {F : C ‚•§ D} {G : C ‚•§ D} {H : C ‚•§ D} {I : D ‚•§ E} {J : D ‚•§ E} {K : D ‚•§ E} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) (Œ≥ : I ‚ü∂ J) (Œ¥ : J ‚ü∂ K) : (Œ± ‚â´ Œ≤) ‚ó´ (Œ≥ ‚â´ Œ¥) = Œ± ‚ó´ Œ≥ ‚â´ Œ≤ ‚ó´ Œ¥ := sorry

end nat_trans


namespace functor


/-- Flip the arguments of a bifunctor. See also `currying.lean`. -/
protected def flip {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D ‚•§ E) : D ‚•§ C ‚•§ E :=
  mk (fun (k : D) => mk (fun (j : C) => obj (obj F j) k) fun (j j' : C) (f : j ‚ü∂ j') => nat_trans.app (map F f) k)
    fun (c c' : D) (f : c ‚ü∂ c') => nat_trans.mk fun (j : C) => map (obj F j) f

@[simp] theorem flip_obj_obj {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D ‚•§ E) (c : C) (d : D) : obj (obj (functor.flip F) d) c = obj (obj F c) d :=
  rfl

@[simp] theorem flip_obj_map {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D ‚•§ E) {c : C} {c' : C} (f : c ‚ü∂ c') (d : D) : map (obj (functor.flip F) d) f = nat_trans.app (map F f) d :=
  rfl

@[simp] theorem flip_map_app {C : Type u‚ÇÅ} [category C] {D : Type u‚ÇÇ} [category D] {E : Type u‚ÇÉ} [category E] (F : C ‚•§ D ‚•§ E) {d : D} {d' : D} (f : d ‚ü∂ d') (c : C) : nat_trans.app (map (functor.flip F) f) c = map (obj F c) f :=
  rfl

