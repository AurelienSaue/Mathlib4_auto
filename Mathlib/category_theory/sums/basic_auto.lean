/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.PrePort
import Mathlib.Lean3Lib.init.default
import Mathlib.category_theory.eq_to_hom
import Mathlib.PostPort

universes u‚ÇÅ v‚ÇÅ 

namespace Mathlib

/-#
Disjoint unions of categories, functors, and natural transformations.
-/

namespace category_theory


/--
`sum C D` gives the direct sum of two categories.
-/
protected instance sum (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] : category (C ‚äï D) :=
  category.mk

@[simp] theorem sum_comp_inl (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] {P : C} {Q : C}
    {R : C} (f : sum.inl P ‚ü∂ sum.inl Q) (g : sum.inl Q ‚ü∂ sum.inl R) : f ‚â´ g = f ‚â´ g :=
  rfl

@[simp] theorem sum_comp_inr (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] {P : D} {Q : D}
    {R : D} (f : sum.inr P ‚ü∂ sum.inr Q) (g : sum.inr Q ‚ü∂ sum.inr R) : f ‚â´ g = f ‚â´ g :=
  rfl

namespace sum


/-- `inl_` is the functor `X ‚Ü¶ inl X`. -/
-- Unfortunate naming here, suggestions welcome.

def inl_ (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] : C ‚•§ C ‚äï D :=
  functor.mk (fun (X : C) => sum.inl X) fun (X Y : C) (f : X ‚ü∂ Y) => f

/-- `inr_` is the functor `X ‚Ü¶ inr X`. -/
def inr_ (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] : D ‚•§ C ‚äï D :=
  functor.mk (fun (X : D) => sum.inr X) fun (X Y : D) (f : X ‚ü∂ Y) => f

/-- The functor exchanging two direct summand categories. -/
def swap (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] : C ‚äï D ‚•§ D ‚äï C :=
  functor.mk (fun (X : C ‚äï D) => sorry) fun (X Y : C ‚äï D) (f : X ‚ü∂ Y) => sorry

@[simp] theorem swap_obj_inl (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] (X : C) :
    functor.obj (swap C D) (sum.inl X) = sum.inr X :=
  rfl

@[simp] theorem swap_obj_inr (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] (X : D) :
    functor.obj (swap C D) (sum.inr X) = sum.inl X :=
  rfl

@[simp] theorem swap_map_inl (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] {X : C} {Y : C}
    {f : sum.inl X ‚ü∂ sum.inl Y} : functor.map (swap C D) f = f :=
  rfl

@[simp] theorem swap_map_inr (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] {X : D} {Y : D}
    {f : sum.inr X ‚ü∂ sum.inr Y} : functor.map (swap C D) f = f :=
  rfl

namespace swap


/-- `swap` gives an equivalence between `C ‚äï D` and `D ‚äï C`. -/
def equivalence (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] : C ‚äï D ‚âå D ‚äï C :=
  equivalence.mk (swap C D) (swap D C)
    (nat_iso.of_components (fun (X : C ‚äï D) => eq_to_iso sorry) sorry)
    (nat_iso.of_components (fun (X : D ‚äï C) => eq_to_iso sorry) sorry)

protected instance is_equivalence (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] :
    is_equivalence (swap C D) :=
  is_equivalence.of_equivalence (equivalence C D)

/-- The double swap on `C ‚äï D` is naturally isomorphic to the identity functor. -/
def symmetry (C : Type u‚ÇÅ) [category C] (D : Type u‚ÇÅ) [category D] : swap C D ‚ãô swap D C ‚âÖ ùü≠ :=
  iso.symm (equivalence.unit_iso (equivalence C D))

end swap


end sum


namespace functor


/-- The sum of two functors. -/
def sum {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÅ} [category B] {C : Type u‚ÇÅ} [category C]
    {D : Type u‚ÇÅ} [category D] (F : A ‚•§ B) (G : C ‚•§ D) : A ‚äï C ‚•§ B ‚äï D :=
  mk (fun (X : A ‚äï C) => sorry) fun (X Y : A ‚äï C) (f : X ‚ü∂ Y) => sorry

@[simp] theorem sum_obj_inl {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÅ} [category B] {C : Type u‚ÇÅ}
    [category C] {D : Type u‚ÇÅ} [category D] (F : A ‚•§ B) (G : C ‚•§ D) (a : A) :
    obj (sum F G) (sum.inl a) = sum.inl (obj F a) :=
  rfl

@[simp] theorem sum_obj_inr {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÅ} [category B] {C : Type u‚ÇÅ}
    [category C] {D : Type u‚ÇÅ} [category D] (F : A ‚•§ B) (G : C ‚•§ D) (c : C) :
    obj (sum F G) (sum.inr c) = sum.inr (obj G c) :=
  rfl

@[simp] theorem sum_map_inl {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÅ} [category B] {C : Type u‚ÇÅ}
    [category C] {D : Type u‚ÇÅ} [category D] (F : A ‚•§ B) (G : C ‚•§ D) {a : A} {a' : A}
    (f : sum.inl a ‚ü∂ sum.inl a') : map (sum F G) f = map F f :=
  rfl

@[simp] theorem sum_map_inr {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÅ} [category B] {C : Type u‚ÇÅ}
    [category C] {D : Type u‚ÇÅ} [category D] (F : A ‚•§ B) (G : C ‚•§ D) {c : C} {c' : C}
    (f : sum.inr c ‚ü∂ sum.inr c') : map (sum F G) f = map G f :=
  rfl

end functor


namespace nat_trans


/-- The sum of two natural transformations. -/
def sum {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÅ} [category B] {C : Type u‚ÇÅ} [category C]
    {D : Type u‚ÇÅ} [category D] {F : A ‚•§ B} {G : A ‚•§ B} {H : C ‚•§ D} {I : C ‚•§ D} (Œ± : F ‚ü∂ G)
    (Œ≤ : H ‚ü∂ I) : functor.sum F H ‚ü∂ functor.sum G I :=
  mk fun (X : A ‚äï C) => sorry

@[simp] theorem sum_app_inl {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÅ} [category B] {C : Type u‚ÇÅ}
    [category C] {D : Type u‚ÇÅ} [category D] {F : A ‚•§ B} {G : A ‚•§ B} {H : C ‚•§ D} {I : C ‚•§ D}
    (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (a : A) : app (sum Œ± Œ≤) (sum.inl a) = app Œ± a :=
  rfl

@[simp] theorem sum_app_inr {A : Type u‚ÇÅ} [category A] {B : Type u‚ÇÅ} [category B] {C : Type u‚ÇÅ}
    [category C] {D : Type u‚ÇÅ} [category D] {F : A ‚•§ B} {G : A ‚•§ B} {H : C ‚•§ D} {I : C ‚•§ D}
    (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (c : C) : app (sum Œ± Œ≤) (sum.inr c) = app Œ≤ c :=
  rfl

end Mathlib